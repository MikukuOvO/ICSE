rabbitmq:
  manager:
    exchange:
      exchange_name: high_level
      exchange_type: direct
    queues:
    - auto_delete: true
      name: manager
      routing_keys:
      - manager
  message_collector:
    exchange:
      exchange_name: collector
      exchange_type: direct
    queues:
    - auto_delete: true
      name: collector
      routing_keys:
      - collector
  service_maintainer:
    exchange:
      exchange_name: high_level
      exchange_type: direct
    queues:
    - auto_delete: true
      name: '{{component}}'
      routing_keys:
      - '{{component}}'
  url: pyamqp://guest@localhost//

# traffic_file_path: "traffic_rasing/social-network/diurnal_traffic.py"
traffic_file_path: "traffic_rasing/social-network/mixed_traffic.py"

chaos_injection:
  namespace: "social-network"
  service: "home-timeline-service"
  container: ""
  chaos_type: "CPU hog"
  # chaos_type: "Socket stress"

heartbeat:
  detection_task: |-
    This task is a detection for the state of your microservice component. 
    # Follow the steps below to complete the task:
      1. Check the state of the microservice component to see if the healthy state is maintained.
      2. If NONE of the above healthy state criteria is violated, you can report healthy directly.
      3. If ANY of the above healthy state criteria is violated, you should follow the steps below:
        - Analyze the root cause of the unhealthy state. You should try your best to identify the root cause. DO NOT take any action to fix the unhealthy state.
        - You are allowed to repeat the above steps a few times to fix the unhealthy state.
      4. Finally, you should report the top 3 root causes of the unhealthy state you identified, with the corresponding format: 
        - Root cause 1: <SERVICE NAME> + <CPU/MEMORY/LATENCY/WORKLOAD>
        - Root cause 2: <SERVICE NAME> + <CPU/MEMORY/LATENCY/WORKLOAD>
        - Root cause 3: <SERVICE NAME> + <CPU/MEMORY/LATENCY/WORKLOAD>
  healing_task: |-
    This task is a healing check for the state of your microservice component. 
    # Follow the steps below to complete the task:
      1. Check the state of the microservice component to see if the healthy state is maintained.
      2. If NONE of the above healthy state criteria is violated, you can report healthy directly.
      3. If ANY of the above healthy state criteria is violated, you should follow the steps below:
        - Analyze the root cause of the unhealthy state. You should try your best to identify the root cause.
        - After the root cause is identified, you should take the necessary actions to fix the unhealthy state.
        - You are allowed to repeat the above steps a few times to fix the unhealthy state.
  optimization_task: |-
    This task is a optimization task for your microservice component.
    # Follow the steps below to complete the task:
      1. Check the state of the microservice component to monitor resource usage and latency.
      2. The latency should be less than 200ms.
        - If the current latency is higher than 200ms, increase resource allocation to reduce latency.
        - If the current latency is comfortably below 200ms, decrease resource allocation to save costs.
      3. You may repeat these steps several times to optimize resource usage further.

  group_task_prefix: |-
    TASK: You are a manager of kubernetes cluster, you need to finish tasks for all components you maintaining with below: \n

